# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "cicd_test" ]

jobs:
  build:

    runs-on: macos-latest
    env:
      XC_VERSION: ${{ '13.4.1' }}
      XC_WORKSPACE: ${{ 'DrinkSomeWater.xcworkspace' }}
      XC_SCHEME: ${{ 'DrinkSomeWater' }}
      
      XC_ARCHIVE_PATH:  ${{ 'DrinkSomeWater.xcarichive' }}
      XC_EXPORT_PATH: ${{ './artifacts' }}
      KEYCHAIN: ${{ 'test.keychain' }}
      
      DECRYPTED_CERTS_FILE_PATH: ${{ '.github/secrets/once.p12' }}
      ENCRYPTED_CERTS_FILE_PATH: ${{ '.github/secrets/once.p12.gpg' }}
      
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/once.mobileprovision' }}
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/once.mobileprovision.gpg' }}
      
      CERTS_ENCRYPTION_PWD: ${{ secrets.CERTS_ENCRYPTION_PWD }}    
      PROVISION_ENCRYPTION_PWD: ${{ secrets.PROVISION_ENCRYPTION_PWD }}     
      CERTS_EXPORT_PWD: ${{ secrets.CERTS_EXPORT_PWD }}

    steps:
    - uses: actions/checkout@v2
    
    - name: Xcode Version
      run: ls -n /Applications/ | grep Xcode
      
    - name: Build
      run: echo Build!! DrinkSomeWater

    - name: Configure Keychain
      run: |
        security create-keychain -p "" "$KEYCHAIN" 
        security list-keychains -s "$KEYCHAIN" 
        security default-keychain -s "$KEYCHAIN" 
        security unlock-keychain -p "" "$KEYCHAIN"
        security set-keychain-settings
        
    - name : Configure Code Signing
      run: | 
        gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTS_ENCRYPTION_PWD" "$ENCRYPTED_CERTS_FILE_PATH"
        gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROFILES_ENCRYPTO_PWD" "$ENCRYPTED_PROVISION_FILE_PATH"
        security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A
        security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        echo `ls .github/secrets/*.mobileprovision`
        # 프로파일들을 rename하고 새로만든 디렉토리에 복사
        for PROVISION in `ls .github/secrets/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
          cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done
          
    - name: Archive
      run: |
        pod install --repo-update --clean-install --project-directory="$PROJECT_ROOT_PATH"/
        xcodebuild clean archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration release -archivePath "$XC_ARCHIVE"
        
    - name: Run tests
      run: xcodebuild clean test -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -destination "platform=iOS Simulator,name=iPhone 11"
      
    - name: Export for App Store
      run: | 
        xcodebuild -exportArchive -archivePath "$XC_ARCHIVE_PATH" -exportOptionsPlist ExportOptions.plist -exportPath "$XC_EXPORT_PATH"
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Artifacts
        path: ./artifacts
